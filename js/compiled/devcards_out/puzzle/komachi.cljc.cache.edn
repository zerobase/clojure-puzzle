;; Analyzed by ClojureScript 1.7.170
{:name puzzle.komachi, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {prime-numbers {:name puzzle.komachi/prime-numbers, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 4, :column 2, :end-line 4, :end-column 20, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 4, :column 7, :end-line 4, :end-column 20}, :doc "A lazy-seq of prime numbers"}, three-digit-primes {:name puzzle.komachi/three-digit-primes, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 17, :column 1, :end-line 17, :end-column 24, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 17, :column 6, :end-line 17, :end-column 24}, :doc "A lazy-seq of three digit prime numbers"}, digits {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 22, :column 7, :end-line 22, :end-column 13, :arglists (quote ([num])), :doc "Returns a vector of each digit of num"}, :name puzzle.komachi/digits, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 13, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Returns a vector of each digit of num"}, komachi? {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 29, :column 7, :end-line 29, :end-column 15, :arglists (quote ([nums])), :doc "Returns true if all digits are distinct and not including zero"}, :name puzzle.komachi/komachi?, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 15, :method-params ([nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nums])), :doc "Returns true if all digits are distinct and not including zero"}, valid? {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([nums])), :doc "Returns true if nums is a valid solution:\n   (1) nums are komachi numbers, and\n   (2) a sum of nums is three digits."}, :name puzzle.komachi/valid?, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 13, :method-params ([nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nums])), :doc "Returns true if nums is a valid solution:\n   (1) nums are komachi numbers, and\n   (2) a sum of nums is three digits."}, make-combinations {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 45, :column 7, :end-line 45, :end-column 24, :arglists (quote ([primes comb])), :doc "Returns (partially or completely) valid combinations of prime numbers"}, :name puzzle.komachi/make-combinations, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 24, :method-params ([primes comb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([primes comb])), :doc "Returns (partially or completely) valid combinations of prime numbers"}, uniq {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 50, :column 7, :end-line 50, :end-column 11, :arglists (quote ([seq])), :doc "Returns unique sequences (item-order-agnostic comparation)"}, :name puzzle.komachi/uniq, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 11, :method-params ([seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seq])), :doc "Returns unique sequences (item-order-agnostic comparation)"}, seek-valid-combinations {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 55, :column 7, :end-line 55, :end-column 30, :arglists (quote ([n])), :doc "Returns valid combinations (seeking recursively for n depth)"}, :name puzzle.komachi/seek-valid-combinations, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 30, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns valid combinations (seeking recursively for n depth)"}, solve {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([]))}, :name puzzle.komachi/solve, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljc", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}}