;; Analyzed by ClojureScript 1.7.170
{:use-macros {are cljs.test, testing cljs.test, is cljs.test, deftest devcards.core, defcard devcards.core}, :excludes #{}, :name puzzle.komachi, :imports nil, :requires {sab sablono.core, sablono.core sablono.core, t cljs.test, cljs.test cljs.test}, :uses nil, :defs {komachi?-test {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 77, :column 10, :end-line 77, :end-column 23}, :name puzzle.komachi/komachi?-test, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, komachi? {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 69, :column 7, :end-line 69, :end-column 15, :arglists (quote ([nums])), :doc "Returns true if all digits are distinct and not including zero"}, :name puzzle.komachi/komachi?, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 15, :method-params ([nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nums])), :doc "Returns true if all digits are distinct and not including zero"}, seek-valid-combinations {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 106, :column 7, :end-line 106, :end-column 30, :arglists (quote ([n])), :doc "Returns valid combinations (seeking recursively for n depth)"}, :name puzzle.komachi/seek-valid-combinations, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 30, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns valid combinations (seeking recursively for n depth)"}, komachi-panel-row {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 122, :column 7, :end-line 122, :end-column 24, :arglists (quote ([num & [opts]])), :doc "Returns a vector of Sablono style HTML form representing a row in komachi-panel", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(num [opts])], :arglists ([num & [opts]]), :arglists-meta (nil)}}, :name puzzle.komachi/komachi-panel-row, :variadic true, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(num [opts])], :arglists ([num & [opts]]), :arglists-meta (nil)}, :method-params [(num [opts])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists ([num & [opts]]), :doc "Returns a vector of Sablono style HTML form representing a row in komachi-panel"}, solutions {:name puzzle.komachi/solutions, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 114, :column 1, :end-line 114, :end-column 15, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 114, :column 6, :end-line 114, :end-column 15}}, valid? {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 88, :column 7, :end-line 88, :end-column 13, :arglists (quote ([nums])), :doc "Returns true if nums is a valid solution:\n   (1) nums are komachi numbers, and\n   (2) a sum of nums is three digits."}, :name puzzle.komachi/valid?, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 13, :method-params ([nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nums])), :doc "Returns true if nums is a valid solution:\n   (1) nums are komachi numbers, and\n   (2) a sum of nums is three digits."}, digits {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([num])), :doc "Returns a vector of each digit of num"}, :name puzzle.komachi/digits, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 13, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Returns a vector of each digit of num"}, komachi-panel-num {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 116, :column 7, :end-line 116, :end-column 24, :arglists (quote ([num])), :doc "Returns a vector of Sablono style HTML form representing a number in komachi-panel"}, :name puzzle.komachi/komachi-panel-num, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 24, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Returns a vector of Sablono style HTML form representing a number in komachi-panel"}, komachi-panel {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 129, :column 7, :end-line 129, :end-column 20, :arglists (quote ([nums])), :doc "Returns a vector of Sablono style HTML form representing komachi calculation"}, :name puzzle.komachi/komachi-panel, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 20, :method-params ([nums]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nums])), :doc "Returns a vector of Sablono style HTML form representing komachi calculation"}, digits-test {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 65, :column 10, :end-line 65, :end-column 21}, :name puzzle.komachi/digits-test, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, uniq {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([seq])), :doc "Returns unique sequences (item-order-agnostic comparation)"}, :name puzzle.komachi/uniq, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 11, :method-params ([seq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seq])), :doc "Returns unique sequences (item-order-agnostic comparation)"}, three-digit-primes-test {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 52, :column 10, :end-line 52, :end-column 33}, :name puzzle.komachi/three-digit-primes-test, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 33, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, three-digit-primes {:name puzzle.komachi/three-digit-primes, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 48, :column 1, :end-line 48, :end-column 24, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 48, :column 6, :end-line 48, :end-column 24}, :doc "A lazy-seq of three digit prime numbers"}, prime-numbers-test {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 43, :column 10, :end-line 43, :end-column 28}, :name puzzle.komachi/prime-numbers-test, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}, prime-numbers {:name puzzle.komachi/prime-numbers, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 30, :column 2, :end-line 30, :end-column 20, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 30, :column 7, :end-line 30, :end-column 20}, :doc "A lazy-seq of prime numbers"}, make-combinations {:protocol-inline nil, :meta {:file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :line 96, :column 7, :end-line 96, :end-column 24, :arglists (quote ([primes comb])), :doc "Returns (partially or completely) valid combinations of prime numbers"}, :name puzzle.komachi/make-combinations, :variadic false, :file "/Users/HidetoIshibashi/dev/clojure-puzzle/src/puzzle/komachi.cljs", :end-column 24, :method-params ([primes comb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([primes comb])), :doc "Returns (partially or completely) valid combinations of prime numbers"}}, :require-macros {dc devcards.core, devcards.core devcards.core, sab sablono.core, sablono.core sablono.core, t cljs.test, cljs.test cljs.test}, :cljs.analyzer/constants {:seen #{:path first komachi?-test last = take komachi? :testing-contexts :func :ns :name :file :end-column :puzzle.komachi :type puzzle.komachi/komachi?-test :digits-test :documentation :column :div :card :komachi-panel-example :main-obj puzzle.komachi/digits-test puzzle.komachi :fail digits puzzle.komachi/prime-numbers-test :line not :initial-data :class :three-digit-primes-test :plus :expected digits-test :end-line :prime-numbers-test puzzle.komachi/three-digit-primes-test :error :options :pass quote :arglists :komachi?-test :actual :doc three-digit-primes-test :solution :test three-digit-primes prime-numbers-test prime-numbers :message :heading :span}, :order [:path :func :puzzle.komachi :card :name :documentation :main-obj :initial-data :options :heading :prime-numbers-test :testing-contexts :type :expected :actual :message :error = quote take prime-numbers :pass :fail not puzzle.komachi/prime-numbers-test :ns :file :end-column :column :line :end-line :arglists :doc :test puzzle.komachi prime-numbers-test :three-digit-primes-test first three-digit-primes last puzzle.komachi/three-digit-primes-test three-digit-primes-test :digits-test digits puzzle.komachi/digits-test digits-test :komachi?-test komachi? puzzle.komachi/komachi?-test komachi?-test :span :class :div :plus :komachi-panel-example :solution]}, :doc nil}